[{"E:\\New folder\\pipes-task\\pipes-task\\src\\index.tsx":"1","E:\\New folder\\pipes-task\\pipes-task\\src\\reportWebVitals.ts":"2","E:\\New folder\\pipes-task\\pipes-task\\src\\App.tsx":"3","E:\\New folder\\pipes-task\\pipes-task\\src\\engine.ts":"4","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\options\\Options.tsx":"5","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\header\\Header.tsx":"6","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\rules\\Rules.tsx":"7","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\history\\History.tsx":"8","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\cell\\Cell.tsx":"9","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\fancyGrid\\FancyGrid.tsx":"10","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\simpleGrid\\SimpleGrid.tsx":"11","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\spinner\\Spinner.tsx":"12","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\slider\\Slider.tsx":"13","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\button\\Button.tsx":"14"},{"size":296,"mtime":1614208786438,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499158900000,"results":"17","hashOfConfig":"16"},{"size":8591,"mtime":1614432764518,"results":"18","hashOfConfig":"16"},{"size":19461,"mtime":1614433896643,"results":"19","hashOfConfig":"16"},{"size":2064,"mtime":1614433606434,"results":"20","hashOfConfig":"16"},{"size":1123,"mtime":1614425837163,"results":"21","hashOfConfig":"16"},{"size":1430,"mtime":1614433002786,"results":"22","hashOfConfig":"16"},{"size":1551,"mtime":1614425837116,"results":"23","hashOfConfig":"16"},{"size":1059,"mtime":1614274290679,"results":"24","hashOfConfig":"16"},{"size":1930,"mtime":1614428123290,"results":"25","hashOfConfig":"16"},{"size":2109,"mtime":1614433928580,"results":"26","hashOfConfig":"16"},{"size":558,"mtime":1614336097575,"results":"27","hashOfConfig":"16"},{"size":794,"mtime":1614431873439,"results":"28","hashOfConfig":"16"},{"size":699,"mtime":1614266727175,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ctwnvw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"E:\\New folder\\pipes-task\\pipes-task\\src\\index.tsx",[],["63","64"],"E:\\New folder\\pipes-task\\pipes-task\\src\\reportWebVitals.ts",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\App.tsx",["65"],"/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport {\n  Pipe,\n  makeShapeGridFromRows,\n  splitRawDataInShapeRows,\n  transformShapeGridToPipeGrid,\n  rotatePipe,\n  appendRotateMessage,\n  checkPipe,\n} from \"./engine\";\nimport Options from \"./components/options/Options\";\nimport Heading from \"./components/header/Header\";\nimport History from \"./components/history/History\";\nimport FancyGrid from \"./components/fancyGrid/FancyGrid\";\nimport SimpleGrid from \"./components/simpleGrid/SimpleGrid\";\nimport Slider from \"./components/slider/Slider\";\n\nexport interface WhatRender {\n  levelsBtns: boolean;\n  fancyGrid: boolean;\n  startGame: boolean;\n  startSolveBtn: boolean;\n  stopSolveBtn: boolean;\n  simpleGrid: boolean;\n  restartBtn: boolean;\n  verify: boolean;\n  info: boolean;\n}\nconst client = new w3cwebsocket(\"ws://hometask.eg1236.com/game-pipes/\");\n\nclient.onopen = () => {\n  console.log(\"Connected\");\n};\n\nconst levels = [1, 2, 3, 4, 5, 6];\n\nlet cellWidth = \"\";\n\nfunction App() {\n  const [grid, setGrid] = useState<Pipe[][]>([]);\n  const [history, setHistory] = useState(\"rotate\");\n  const [counter, setCounter] = useState(0);\n  const [autoSolve, setAutoSolve] = useState(false);\n  const [verifyMsg, setVerifyMsg] = useState(\"\");\n  const [autoSolveTime, setAutoSolveTime] = useState(2);\n  const [whatRender, setWhatRender] = useState({\n    levelsBtns: true,\n    fancyGrid: false,\n    simpleGrid: false,\n    startGame: false,\n    startSolveBtn: false,\n    stopSolveBtn: false,\n    restartBtn: false,\n    verify: false,\n    info: true,\n  });\n\n  const timeOut = useRef<NodeJS.Timeout>();\n  const mapAsString = useRef(\"\");\n  const xx = useRef(0);\n  const yy = useRef(0);\n  const rotateCount = useRef(0);\n  const totalPipes = useRef(0);\n  const pipesToSolve = useRef(0);\n  const currentLevel = useRef(0);\n\n  client.onmessage = (msg) => {\n    const info: string = msg.data as string;\n    console.log(\"info\", info);\n    if (info.startsWith(\"verify: Correct\")) {\n      setVerifyMsg(info);\n    }\n    if (info.startsWith(\"verify: Incorrect\")) {\n      setVerifyMsg(`${info} Something is not connecting right, keep solving`);\n    }\n    mapAsString.current = info;\n  };\n  // console.log(\"mapAsString.current\", mapAsString.current);\n\n  useEffect(() => {\n    if (grid.length && autoSolve) {\n      let loopCountLeft = totalPipes.current;\n      let keepLooping = true;\n      do {\n        if (counter) {\n          xx.current += 1;\n        }\n        if (xx.current >= grid[0].length) {\n          xx.current = 0;\n          yy.current += 1;\n        }\n        if (yy.current >= grid.length) {\n          yy.current = 0;\n          xx.current = 0;\n        }\n\n        if (!grid[yy.current][xx.current].isDone) {\n          keepLooping = false;\n        }\n\n        loopCountLeft -= 1;\n        if (loopCountLeft < 0) {\n          keepLooping = false;\n        }\n      } while (keepLooping);\n\n      timeOut.current = setTimeout(() => {\n        const { rotateMessage, pipesLeft } = checkPipe(\n          xx.current,\n          yy.current,\n          grid,\n          history,\n          pipesToSolve.current\n        );\n\n        if (rotateMessage.length !== history.length) {\n          rotateCount.current = counter;\n          setHistory(rotateMessage);\n        }\n\n        pipesToSolve.current = pipesLeft;\n        if (counter - rotateCount.current > pipesToSolve.current) {\n          stopAutoSolve();\n          return;\n        }\n        setCounter(counter + 1);\n      }, autoSolveTime*200);\n    }\n  }, [counter, autoSolve]);\n\n\n\n  const setLevel = (level: number) => {\n    client.send(`new ${level}`);\n    client.send(\"map\");\n    currentLevel.current = level;\n    setWhatRender({\n      ...whatRender,\n      levelsBtns: false,\n      startGame: true,\n      restartBtn: true,\n    });\n  };\n\n  const startGame = () => {\n    const step1 = splitRawDataInShapeRows(mapAsString.current);\n    const step2 = makeShapeGridFromRows(step1);\n    const step3 = transformShapeGridToPipeGrid(step2);\n    totalPipes.current = step3.length * step3[0].length;\n    cellWidth = `${100 / step2[0].length}%`;\n    pipesToSolve.current = totalPipes.current;\n    setGrid(step3);\n    setHistory(\"rotate\");\n    if (currentLevel.current <= 3) {\n      setWhatRender({\n        ...whatRender,\n        startGame: false,\n        restartBtn: true,\n        startSolveBtn: true,\n        fancyGrid: true,\n        verify: true,\n      });\n    } else {\n      setWhatRender({\n        ...whatRender,\n        startGame: false,\n        restartBtn: true,\n        startSolveBtn: true,\n        // simpleGrid: true,\n        verify: true,\n      });\n    }\n  };\n\n  const restartGame = () => {\n    setHistory(\"rotate\");\n    setCounter(0);\n    xx.current = 0;\n    yy.current = 0;\n    clearTimeout(timeOut.current!);\n    setAutoSolve(false);\n    setVerifyMsg(\"\");\n    setWhatRender({\n      ...whatRender,\n      levelsBtns: true,\n      startGame: false,\n      restartBtn: false,\n      startSolveBtn: false,\n      stopSolveBtn: false,\n      fancyGrid: false,\n      simpleGrid: false,\n      verify: false,\n    });\n  };\n\n  const startAutoSolve = () => {\n    rotateCount.current = counter;\n\n    if (currentLevel.current > 2) {\n      setAutoSolveTime(0);\n    }\n\n    setAutoSolve(true);\n    setVerifyMsg(\"\");\n    setWhatRender({\n      ...whatRender,\n      startSolveBtn: false,\n      stopSolveBtn: true,\n      verify: false,\n      simpleGrid: false,\n    });\n  };\n\n  const stopAutoSolve = () => {\n    clearTimeout(timeOut.current!);\n    setAutoSolve(false);\n    setWhatRender({\n      ...whatRender,\n      startSolveBtn: true,\n      stopSolveBtn: false,\n      verify: true,\n    });\n  };\n\n  const cellClickHandler = (x: number, y: number, pipe?: Pipe) => {\n    if (grid[y][x].isDone) {\n      alert(\"you need to unlock pipe to rotate it\");\n      return;\n    }\n    setCounter(counter + 1);\n    const newGrid = [...grid];\n    grid[y][x] = rotatePipe(newGrid[y][x]);\n    setHistory(appendRotateMessage(history, x, y));\n    setVerifyMsg(\"\");\n    setGrid(newGrid);\n  };\n\n  const rightClickHandler = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    x: number,\n    y: number\n  ) => {\n    e.preventDefault();\n    const newGrid = [...grid];\n    if (newGrid[y][x].isDone) {\n      newGrid[y][x].isDone = false;\n      setGrid(newGrid);\n      return;\n    }\n    newGrid[y][x].allowedPositions = [newGrid[y][x].position];\n    newGrid[y][x].isDone = true;\n    setGrid(newGrid);\n  };\n\n  const verifyResults = () => {\n    client.send(history);\n    client.send(\"verify\");\n    setHistory(\"rotate\");\n  };\n\n  return (\n    <div>\n      <Heading />\n      <div className='container container-fluid main-content'>\n        <div className='row'>\n          <div className='col-sm-9 col-xs-12'>\n            <Options\n              whatRender={whatRender}\n              levels={levels}\n              onLevelClick={setLevel}\n              onStartClick={startGame}\n              onAutoSolveClick={startAutoSolve}\n              onStopAutoSolveClick={stopAutoSolve}\n              onRestartClick={restartGame}\n            />\n            {currentLevel.current < 3 && whatRender.fancyGrid && (\n              <Slider\n                min={0}\n                max={4}\n                value={autoSolveTime}\n                onChange={(value) => {\n                  setAutoSolveTime(value);\n                }}\n              />\n            )}\n            <FancyGrid\n              whatRender={whatRender}\n              grid={grid}\n              cellWidth={cellWidth}\n              xx={xx.current}\n              yy={yy.current}\n              level={currentLevel.current}\n              cellClickHandler={cellClickHandler}\n              rightClickHandler={rightClickHandler}\n            />\n            <SimpleGrid\n              handleGridShow={() =>\n                setWhatRender({\n                  ...whatRender,\n                  simpleGrid: true,\n                })\n              }\n              rightClickHandler={rightClickHandler}\n              whatRender={whatRender}\n              cellClickHandler={cellClickHandler}\n              grid={grid}\n              level={currentLevel.current}\n            />\n          </div>\n          <div className='col-sm-3 col-xs-12 center-xs'>\n            <History\n              whatRender={whatRender}\n              history={history}\n              counter={counter}\n              verifyMsg={verifyMsg}\n              level={currentLevel.current}\n              onVerifyClick={verifyResults}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\New folder\\pipes-task\\pipes-task\\src\\engine.ts",["66"],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\options\\Options.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\header\\Header.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\rules\\Rules.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\history\\History.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\cell\\Cell.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\fancyGrid\\FancyGrid.tsx",["67"],"import React, { FC } from \"react\";\nimport { WhatRender } from \"../../App\";\nimport { Pipe } from \"../../engine\";\nimport { Cell } from \"../cell/Cell\";\nimport Slider from \"../slider/Slider\";\nimport Spinner from \"../spinner/Spinner\";\nimport style from \"./fancyGrid.module.scss\";\n\ntype Props = {\n  grid: Pipe[][];\n  cellWidth: string;\n  xx: number;\n  yy: number;\n  level: number;\n  whatRender: WhatRender;\n  cellClickHandler: (x: number, y: number, pipe: Pipe) => void;\n  rightClickHandler: (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    x: number,\n    y: number\n  ) => void;\n};\n\nconst FancyGrid: FC<Props> = ({\n  grid,\n  cellWidth,\n  xx,\n  yy,\n  level,\n  whatRender,\n  cellClickHandler,\n  rightClickHandler,\n}) => {\n  const { fancyGrid, stopSolveBtn } = whatRender;\n\n  const showFancyGrid = () => {\n    if (fancyGrid && level > 2 && stopSolveBtn) {\n      return false;\n    }\n    if (fancyGrid) {\n      return true;\n    }\n    return false;\n  };\n  return (\n    <div className={style.fancyGrid}>\n      {fancyGrid && level > 2 && stopSolveBtn && <Spinner />}\n      {showFancyGrid() &&\n        grid.map((row, y) => {\n          return (\n            <div className={style.grid} key={`key${y}`}>\n              {row.map((pipe, x) => {\n                return (\n                  <div\n                    key={`key${y}${x}`}\n                    style={{ width: cellWidth, minWidth: \"30px\" }}\n                  >\n                    <Cell\n                      pipe={pipe}\n                      isActive={xx === x && yy === y}\n                      onClick={() => cellClickHandler(x, y, pipe)}\n                      onRightClick={(\n                        e: React.MouseEvent<HTMLDivElement, MouseEvent>\n                      ) => rightClickHandler(e, x, y)}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default FancyGrid;\n","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\simpleGrid\\SimpleGrid.tsx",[],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\spinner\\Spinner.tsx",[],["68","69"],"E:\\New folder\\pipes-task\\pipes-task\\src\\components\\slider\\Slider.tsx",["70"],"import React, { FC, useState } from \"react\";\nimport style from \"./slider.module.scss\";\n\ntype Props = {\n  min: number;\n  max: number;\n  value: number;\n  onChange: (value: number) => void;\n};\n\nconst Slider: FC<Props> = ({ min = 0, max = 4, value, onChange }) => {\n  return (\n    <div className='row'>\n      <div className='col-xs-2 end-xs col-xs-offset-1'>slower</div>\n      <div className='col-xs-6'>\n        <div className={style.slider}>\n          <input\n            className={style.range}\n            type='range'\n            min={min}\n            max={max}\n            value={value}\n            onChange={(e) => onChange(parseInt(e.target.value, 10))}\n          />\n        </div>\n      </div>\n      <div className='col-xs-2 start-xs'>faster</div>\n    </div>\n  );\n};\n\nexport default Slider;\n","E:\\New folder\\pipes-task\\pipes-task\\src\\components\\button\\Button.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":131,"column":6,"nodeType":"77","endLine":131,"endColumn":26,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":549,"column":7,"nodeType":"81","messageId":"82","endLine":549,"endColumn":42},{"ruleId":"79","severity":1,"message":"83","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":14},{"ruleId":"71","replacedBy":"84"},{"ruleId":"73","replacedBy":"85"},{"ruleId":"79","severity":1,"message":"86","line":1,"column":21,"nodeType":"81","messageId":"82","endLine":1,"endColumn":29},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'autoSolveTime', 'grid', 'history', and 'stopAutoSolve'. Either include them or remove the dependency array.","ArrayExpression",["89"],"@typescript-eslint/no-unused-vars","'isDoneAndConnectedSpecificDirection' is assigned a value but never used.","Identifier","unusedVar","'Slider' is defined but never used.",["87"],["88"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [counter, autoSolve, grid, autoSolveTime, history, stopAutoSolve]",{"range":"92","text":"93"},[3575,3595],"[counter, autoSolve, grid, autoSolveTime, history, stopAutoSolve]"]